"""
This type stub file was generated by pyright.
"""

def merge_specs(target, source):
    """
    Update target dictionary with values from the source, recursively.
    List items will be merged.
    """
    ...

def get_schema_specs(schema_id, swagger):
    ...

def get_specs(rules, ignore_verbs, optional_fields, sanitizer, doc_dir=...):
    ...

def swag_from(specs=..., filetype=..., endpoint=..., methods=..., validation=..., schema_id=..., data=..., definition=..., validation_function=..., validation_error_handler=...):
    """
    Takes a filename.yml, a dictionary or object and loads swagger specs.

    :param specs: a filepath, a dictionary or an object
    :param filetype: yml or yaml (json and py to be implemented)
    :param endpoint: endpoint to build definition name
    :param methods: method to build method based specs
    :param validation: perform validation?
    :param schema_id: Definition id ot name to use for validation
    :param data: data to validate (default is request.json)
    :param definition: alias to schema_id
    :param validation_function:
        custom validation function which takes the positional
        arguments: data to be validated at first and schema to validate
        against at second
    :param validation_error_handler: custom function to handle
        exceptions thrown when validating which takes the exception
        thrown as the first, the data being validated as the second and
        the schema being used to validate as the third argument
    """
    ...

def validate(data=..., schema_id=..., filepath=..., root=..., definition=..., specs=..., validation_function=..., validation_error_handler=...):
    """
    This method is available to use YAML swagger definitions file
    or specs (dict or object) to validate data against its jsonschema.

    example:
        validate({"item": 1}, 'item_schema', 'defs.yml', root=__file__)
        validate(request.json, 'User', specs={'definitions': {'User': ...}})

    :param data: data to validate, by defaull is request.json
    :param schema_id: The definition id to use to validate (from specs)
    :param filepath: definition filepath to load specs
    :param root: root folder (inferred if not provided), unused if path
        starts with `/`
    :param definition: Alias to schema_id (kept for backwards
        compatibility)
    :param specs: load definitions from dict or object passed here
        instead of a file.
    :param validation_function: custom validation function which takes
        the positional arguments: data to be validated at first and
        schema to validate against at second
    :param validation_error_handler: custom function to handle
        exceptions thrown when validating which takes the exception
        thrown as the first, the data being validated as the second and
        the schema being used to validate as the third argument
    """
    ...

def apispec_to_template(app, spec, definitions=..., paths=...):
    """
    Converts apispec object in to flasgger definitions template
    :param app: Current app
    :param spec: apispec.APISpec
    :param definitions: a list of [Schema, ..] or [('Name', Schema), ..]
    :param paths: A list of flask views
    """
    ...

def ordered_dict_to_dict(d):
    """
    Converts inner OrderedDict to bare dict
    """
    ...

def remove_suffix(fpath):
    """Remove all file ending suffixes"""
    ...

def is_python_file(fpath):
    """Naive Python module filterer"""
    ...

def pathify(basenames, examples_dir=...):
    """*nix to python module path"""
    ...

def get_examples(examples_dir=...):
    """All example modules"""
    ...

def get_path_from_doc(full_doc):
    """
    If `file:` is provided import the file.
    """
    ...

def json_to_yaml(content):
    """
    TODO: convert json to yaml
    """
    ...

def load_from_file(swag_path, swag_type=..., root_path=...):
    """
    Load specs from YAML file
    """
    ...

def detect_by_bom(path, default=...):
    ...

def parse_docstring(obj, process_doc, endpoint=..., verb=...):
    """
    Gets swag data for method/view docstring
    """
    ...

def get_root_path(obj):
    """
    Get file path for object and returns its dirname
    """
    ...

def parse_definition_docstring(obj, process_doc):
    """
    Gets swag data from docstring for class based definitions
    """
    ...

def parse_imports(full_doc, root_path=...):
    """
    Supports `import: otherfile.yml` in docstring specs
    """
    ...

def extract_definitions(alist, level=..., endpoint=..., verb=..., prefix_ids=...):
    """
    Since we couldn't be bothered to register models elsewhere
    our definitions need to be extracted from the parameters.
    We require an 'id' field for the schema to be correctly
    added to the definitions list.
    """
    ...

def has_valid_dispatch_view_docs(endpoint):
    """
    Return True if dispatch_request is swaggable
    """
    ...

def is_valid_method_view(endpoint):
    """
    Return True if obj is MethodView
    """
    ...

def get_vendor_extension_fields(mapping):
    """
    Identify vendor extension fields and extract them into a new dictionary.
    Examples:
        >>> get_vendor_extension_fields({'test': 1})
        {}
        >>> get_vendor_extension_fields({'test': 1, 'x-test': 2})
        {'x-test': 2}
    """
    ...

class StringLike(object):
    """
    Class to mimic the behavior of a regular string. Classes that inherit (or
    mixin) this class must implement the `__str__` magic method. Whatever that
    method returns is used by the various string-like methods.
    """
    def __getattr__(self, attr):
        """
        Forwards any non-magic methods to the resulting string's class. This
        allows support for string methods like `upper()`, `lower()`, etc.
        """
        ...
    
    def __len__(self):
        ...
    
    def __getitem__(self, key):
        ...
    
    def __iter__(self):
        ...
    
    def __contains__(self, item):
        ...
    
    def __add__(self, other):
        ...
    
    def __radd__(self, other):
        ...
    
    def __mul__(self, other):
        ...
    
    def __rmul__(self, other):
        ...
    
    def __lt__(self, other) -> bool:
        ...
    
    def __le__(self, other) -> bool:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    def __gt__(self, other) -> bool:
        ...
    
    def __ge__(self, other) -> bool:
        ...
    
    @property
    def text_type(self):
        ...
    


class LazyString(StringLike):
    """
    A lazy string *without* caching. The resulting string is regenerated for
    every request.
    """
    def __init__(self, func) -> None:
        """
        Creates a `LazyString` object using `func` as the delayed closure.
        `func` must return a string.
        """
        ...
    
    def __str__(self) -> str:
        """
        Returns the actual string.
        """
        ...
    


class CachedLazyString(LazyString):
    """
    A lazy string with caching.
    """
    def __init__(self, func) -> None:
        """
        Uses `__init__()` from the parent and initializes a cache.
        """
        ...
    
    def __str__(self) -> str:
        """
        Returns the actual string and caches the result.
        """
        ...
    


