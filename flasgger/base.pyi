"""
This type stub file was generated by pyright.
"""

from flask.views import MethodView
from flask.json import JSONEncoder

"""
What's the big idea?

An endpoint that traverses all restful endpoints producing a swagger 2.0 schema
If a swagger yaml description is found in the docstrings for an endpoint
we add the endpoint to swagger specification output

"""
def NO_SANITIZER(text):
    ...

def BR_SANITIZER(text):
    ...

def MK_SANITIZER(text):
    ...

class APIDocsView(MethodView):
    """
    The /apidocs
    """
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def get(self):
        """
        The data under /apidocs
        json or Swagger UI
        """
        ...
    


class APISpecsView(MethodView):
    """
    The /apispec_1.json and other specs
    """
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def get(self):
        """
        The Swagger view get method outputs to /apispecs_1.json
        """
        ...
    


class SwaggerDefinition(object):
    """
    Class based definition
    """
    def __init__(self, name, obj, tags=...) -> None:
        ...
    


class Swagger(object):
    DEFAULT_CONFIG = ...
    SCHEMA_TYPES = ...
    SCHEMA_LOCATIONS = ...
    def __init__(self, app=..., config=..., sanitizer=..., template=..., template_file=..., decorators=..., validation_function=..., validation_error_handler=..., parse=...) -> None:
        ...
    
    def init_app(self, app, decorators=...):
        """
        Initialize the app with Swagger plugin
        """
        ...
    
    def load_swagger_file(self, filename):
        ...
    
    @property
    def configured(self):
        """
        Return if `init_app` is configured
        """
        ...
    
    def get_url_mappings(self, rule_filter=...):
        """
        Returns all werkzeug rules
        """
        ...
    
    def get_def_models(self, definition_filter=...):
        """
        Used for class based definitions
        """
        ...
    
    def get_apispecs(self, endpoint=...):
        ...
    
    def definition(self, name, tags=...):
        """
        Decorator to add class based definitions
        """
        ...
    
    def load_config(self, app):
        """
        Copy config from app
        """
        ...
    
    def register_views(self, app):
        """
        Register Flasgger views
        """
        ...
    
    def add_headers(self, app):
        """
        Inject headers after request
        """
        ...
    
    def parse_request(self, app):
        ...
    
    def validate(self, schema_id, validation_function=..., validation_error_handler=...):
        """
        A decorator that is used to validate incoming requests data
        against a schema

            swagger = Swagger(app)

            @app.route('/pets', methods=['POST'])
            @swagger.validate('Pet')
            @swag_from("pet_post_endpoint.yml")
            def post():
                return db.insert(request.data)

        This annotation only works if the endpoint is already swagged,
        i.e. placing @swag_from above @validate or not declaring the
        swagger specifications in the method's docstring *won't work*

        Naturally, if you use @app.route annotation it still needs to
        be the outermost annotation

        :param schema_id: the id of the schema with which the data will
            be validated

        :param validation_function: custom validation function which
            takes the positional arguments: data to be validated at
            first and schema to validate against at second

        :param validation_error_handler: custom function to handle
            exceptions thrown when validating which takes the exception
            thrown as the first, the data being validated as the second
            and the schema being used to validate as the third argument
        """
        ...
    
    def get_schema(self, schema_id):
        """
        This method finds a schema known to Flasgger and returns it.

        :raise KeyError: when the specified :param schema_id: is not
        found by Flasgger

        :param schema_id: the id of the desired schema
        """
        ...
    


Flasgger = Swagger
class LazyJSONEncoder(JSONEncoder):
    def default(self, obj):
        ...
    


