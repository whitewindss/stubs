"""
This type stub file was generated by pyright.
"""

"""Core apispec classes and functions."""
VALID_METHODS_OPENAPI_V2 = ["get", "post", "put", "patch", "delete", "head", "options"]
VALID_METHODS_OPENAPI_V3 = VALID_METHODS_OPENAPI_V2 + ["trace"]
VALID_METHODS = { 2: VALID_METHODS_OPENAPI_V2,3: VALID_METHODS_OPENAPI_V3 }
class Components:
    """Stores OpenAPI components

    Components are top-level fields in OAS v2.
    They became sub-fields of "components" top-level field in OAS v3.
    """
    schemas: dict
    def __init__(self, plugins, openapi_version) -> None:
        ...
    
    def to_dict(self):
        ...
    
    def schema(self, component_id, component=..., **kwargs):
        """Add a new schema to the spec.

        :param str component_id: identifier by which schema may be referenced.
        :param dict component: schema definition.
        :param kwargs: plugin-specific arguments

        .. note::

            If you are using `apispec.ext.marshmallow`, you can pass fields' metadata as
            additional keyword arguments.

            For example, to add ``enum`` and ``description`` to your field: ::

                status = fields.String(
                    required=True,
                    metadata={
                        "description": "Status (open or closed)",
                        "enum": ["open", "closed"],
                    },
                )

        https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#schemaObject
        """
        ...
    
    def response(self, component_id, component=..., **kwargs):
        """Add a response which can be referenced.

        :param str component_id: ref_id to use as reference
        :param dict component: response fields
        :param kwargs: plugin-specific arguments
        """
        ...
    
    def parameter(self, component_id, location, component=..., **kwargs):
        """Add a parameter which can be referenced.

        :param str component_id: identifier by which parameter may be referenced.
        :param str location: location of the parameter.
        :param dict component: parameter fields.
        :param kwargs: plugin-specific arguments
        """
        ...
    
    def header(self, component_id, component):
        """Add a header which can be referenced.

        :param str component_id: identifier by which header may be referenced.
        :param dict component: header fields.

        https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#headerObject
        """
        ...
    
    def example(self, component_id, component):
        """Add an example which can be referenced

        :param str component_id: identifier by which example may be referenced.
        :param dict component: example fields.

        https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#exampleObject
        """
        ...
    
    def security_scheme(self, component_id, component):
        """Add a security scheme which can be referenced.

        :param str component_id: component_id to use as reference
        :param dict component: security scheme fields
        """
        ...
    
    def get_ref(self, obj_type, obj):
        """Return object or reference

        If obj is a dict, it is assumed to be a complete description and it is returned as is.
        Otherwise, it is assumed to be a reference name as string and the corresponding $ref
        string is returned.

        :param str obj_type: "schema", "parameter", "response" or "security_scheme"
        :param dict|str obj: object in dict form or as ref_id string
        """
        ...
    
    def resolve_refs_in_path(self, path):
        ...
    


class APISpec:
    """Stores metadata that describes a RESTful API using the OpenAPI specification.

    :param str title: API title
    :param str version: API version
    :param list|tuple plugins: Plugin instances.
        See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#infoObject
    :param str|OpenAPIVersion openapi_version: OpenAPI Specification version.
        Should be in the form '2.x' or '3.x.x' to comply with the OpenAPI standard.
    :param options: Optional top-level keys
        See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#openapi-object
    """
    components: Components
    def __init__(self, title, version, openapi_version, plugins=..., **options) -> None:
        ...
    
    def to_dict(self):
        ...
    
    def to_yaml(self, yaml_dump_kwargs=...):
        """Render the spec to YAML. Requires PyYAML to be installed.

        :param dict yaml_dump_kwargs: Additional keyword arguments to pass to `yaml.dump`
        """
        ...
    
    def tag(self, tag):
        """Store information about a tag.

        :param dict tag: the dictionary storing information about the tag.
        """
        ...
    
    def path(self, path=..., *, operations=..., summary=..., description=..., parameters=..., **kwargs):
        """Add a new path object to the spec.

        https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#path-item-object

        :param str|None path: URL path component
        :param dict|None operations: describes the http methods and options for `path`
        :param str summary: short summary relevant to all operations in this path
        :param str description: long description relevant to all operations in this path
        :param list|None parameters: list of parameters relevant to all operations in this path
        :param kwargs: parameters used by any path helpers see :meth:`register_path_helper`
        """
        ...
    


